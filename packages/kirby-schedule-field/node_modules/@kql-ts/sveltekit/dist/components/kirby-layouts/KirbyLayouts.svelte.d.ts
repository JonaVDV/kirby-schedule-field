import type { KirbyLayout } from '@kql-ts/core/';
import type { Snippet } from 'svelte';
declare class __sveltets_Render<TLayouts extends KirbyLayout[]> {
    props(): {
        layouts: TLayouts;
        layoutWrapper?: Snippet<[layoutSnippet: Snippet<[layoutData: TLayouts[number]]>, layout: TLayouts[number]]> | undefined;
        children: Snippet<[columnData: TLayouts[number]["columns"][number]]>;
        columnWrapper?: Snippet<[columnSnippet: Snippet<[columnData: TLayouts[number]["columns"][number]]>, column: TLayouts[number]["columns"][number]]> | undefined;
        '--grid-gap'?: string;
    };
    events(): {};
    slots(): {};
    bindings(): "";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <TLayouts extends KirbyLayout[]>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<TLayouts>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<TLayouts>['props']>, ReturnType<__sveltets_Render<TLayouts>['events']>, ReturnType<__sveltets_Render<TLayouts>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<TLayouts>['bindings']>;
    } & ReturnType<__sveltets_Render<TLayouts>['exports']>;
    <TLayouts extends KirbyLayout[]>(internal: unknown, props: ReturnType<__sveltets_Render<TLayouts>['props']> & {}): ReturnType<__sveltets_Render<TLayouts>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
/**
 * KirbyLayouts
 *
 * @description
 * A component that renders Kirby CMS layouts with a flexible column system.
 * Supports both default grid layouts and custom layout rendering through snippets.
 *
 * @props
 * - `layouts`: {TLayouts} `(required)` - Array of layout configurations
 * - `layoutWrapper`: Snippet `(optional)` - Custom wrapper for layout rendering
 * - `columnWrapper`: Snippet `(optional)` - Custom wrapper for column rendering
 * - `children`: Snippet `(required)` - Renders column content, typically Kirby blocks
 *
 * @structure
 * Layout → Columns → Blocks hierarchy:
 * 1. each layout contains multiple columns
 * 2. each column has a width and contains multiple blocks
 * 3. blocks are rendered using the children snippet in combination with the `KirbyBlocks` component
 *
 * @css
 * - `--grid-gap` - the gap between columns in the default grid layout
 *
 * @example
 * ```svelte
 * <script>
 * 	// this example uses snippets to customize the rendering of the layouts, columns and children
 * 	import { KirbyLayouts } from 'sveltekit-kql/components';
 *
 * 	// the layouts come from the page data usually
 * 	let layouts = $derived(data.page.layouts);
 * </script>
 *
 * <KirbyLayouts {layouts}>
 * 	{#snippet layoutWrapper(snippet, layout)}
 * 		<div class="grid">
 * 			{@render snippet(layout)}
 * 		</div>
 * 	{/snippet}
 *
 * 	{#snippet columnWrapper(snippet, column)}
 * 		{@const columnSpan = spanColumns(column.width)}
 * 		<div class="column" style="--columns: {columnSpan}">
 * 			{@render snippet(column)}
 * 		</div>
 * 	{/snippet}
 *
 *
 * 	{#snippet children(column)}
 * 		{@const blocks = column.blocks}
 *
 * 		<KirbyBlocks {blocks} />
 * 	{/snippet}
 * </KirbyLayouts>
 * ```
 *
 * @example
 * ```svelte
 * <script>
 * 	// this example uses the default grid layout
 * 	import { KirbyLayouts } from 'sveltekit-kql/components';
 *
 * 	// the layouts come from the page data usually
 * 	let layouts = $derived(data.page.layouts);
 *
 * 	// the children snippet is required to render the blocks. without this snippet, the blocks will not be rendered.
 * </script>
 * <KirbyLayouts {layouts}>
 * 	{#snippet children(column)}
 * 		{@const blocks = column.blocks}
 *
 * 		<KirbyBlocks {blocks} />
 * 	{/snippet}
 * </KirbyLayouts>
 * ```
 */
declare const KirbyLayouts: $$IsomorphicComponent;
type KirbyLayouts<TLayouts extends KirbyLayout[]> = InstanceType<typeof KirbyLayouts<TLayouts>>;
export default KirbyLayouts;
