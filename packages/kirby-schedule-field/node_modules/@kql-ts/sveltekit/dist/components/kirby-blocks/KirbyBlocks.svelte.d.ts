import type { KirbyBlock } from '@kql-ts/core';
import type { Snippet } from 'svelte';
declare class __sveltets_Render<TBlocks extends KirbyBlock<any>[]> {
    props(): {
        /**
         * An array of blocks to render.
         */
        blocks: TBlocks;
        blockWrapper?: Snippet<[block: TBlocks[number]]> | undefined;
        /** --- css props --- */
        /** The padding of the error message */
        '--error-padding'?: string;
        /** The margin of the error message */
        '--error-margin'?: string;
        /** The border radius of the error message */
        '--error-border-radius'?: string;
        /** The border width of the error message */
        '--error-border-width'?: string;
        /** The border color of the error message */
        '--error-border-color'?: string;
        /** The background color of the error message */
        '--error-background-color'?: string;
        /** The text color of the error message */
        '--error-text-color'?: string;
    };
    events(): {};
    slots(): {};
    bindings(): "";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <TBlocks extends KirbyBlock<any>[]>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<TBlocks>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<TBlocks>['props']>, ReturnType<__sveltets_Render<TBlocks>['events']>, ReturnType<__sveltets_Render<TBlocks>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<TBlocks>['bindings']>;
    } & ReturnType<__sveltets_Render<TBlocks>['exports']>;
    <TBlocks extends KirbyBlock<any>[]>(internal: unknown, props: ReturnType<__sveltets_Render<TBlocks>['props']> & {}): ReturnType<__sveltets_Render<TBlocks>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
/**
 * KirbyBlocks
 *
 * @description - A component that renders a list of blocks based on their type.
 *
 * @param blocks - An array of blocks to render.
 *
 * @example
 * ```svelte
 * <script>
 * import KirbyBlocks from 'sveltekit-kql/components';
 * import { setBlocksContext } from 'sveltekit-kql/components/';
 *
 * //your components
 * import Heading from './Heading.svelte';
 * import Paragraph from './Paragraph.svelte';
 * import Image from './Image.svelte';
 *
 * // Define the blocks context
 * setBlocksContext({
 * 	heading: Heading,
 * 	paragraph: Paragraph,
 * 	image: Image,
 * });
 * </script>
 *
 * <KirbyBlocks {blocks} />
 *
 * ```
 *
 * @css variables you can adjust:
 * ```css
 * --error-padding: 1rem;
 * --error-margin: 0.5rem;
 * --error-border-radius: 4px;
 * --error-border-width: 4px;
 * --error-border-color: #ff4444;
 * --error-background-color: #2a1717;
 * --error-text-color: #f8d7da;
 * ```
 *
 * @errors **The component will display an error message if:**
 * - The blocks context is not set.
 * - A block type is not found in the blocks context.
 */
declare const KirbyBlocks: $$IsomorphicComponent;
type KirbyBlocks<TBlocks extends KirbyBlock<any>[]> = InstanceType<typeof KirbyBlocks<TBlocks>>;
export default KirbyBlocks;
