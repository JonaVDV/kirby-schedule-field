import * as Vue from 'vue';
import { P as Panel } from './shared/kirbyuse.B2g-y_mw.js';
export { c as isKirby4, i as isKirby5, u as useApi, a as useApp, b as useBlock, d as useContent, e as useDialog, f as useI18n, g as usePanel, h as useSection, j as useStore } from './shared/kirbyuse.B2g-y_mw.js';
import 'vue/types/vue';
import 'vue/types/v3-component-public-instance';

declare function createLogger(tag: string): Record<"error" | "warn" | "log" | "info" | "success", (...args: any[]) => void>;

interface PluginAsset {
    filename: string;
    url: string;
}
declare function registerPluginAssets(assets: PluginAsset[]): Promise<void>;
declare function resolvePluginAsset(filename: string): PluginAsset;
declare function loadPluginModule(filename: string): Promise<any>;

declare const globalVue: typeof Vue;

declare global {
    interface Window {
        Vue: typeof Vue;
        panel: Panel;
    }
}
declare const computed: typeof Vue.computed;
declare const customRef: typeof Vue.customRef;
declare const defineAsyncComponent: typeof Vue.defineAsyncComponent;
declare const defineComponent: typeof Vue.defineComponent;
declare const effectScope: typeof Vue.effectScope;
declare const getCurrentInstance: typeof Vue.getCurrentInstance;
declare const getCurrentScope: typeof Vue.getCurrentScope;
declare const h: Vue.CreateElement;
declare const inject: typeof Vue.inject;
declare const isProxy: typeof Vue.isProxy;
declare const isReactive: typeof Vue.isReactive;
declare const isReadonly: typeof Vue.isReadonly;
declare const isRef: typeof Vue.isRef;
declare const isShallow: typeof Vue.isShallow;
declare const markRaw: typeof Vue.markRaw;
declare const nextTick: typeof Vue.nextTick;
declare const onActivated: (fn: () => void, target?: any) => void;
declare const onBeforeMount: (fn: () => void, target?: any) => void;
declare const onBeforeUnmount: (fn: () => void, target?: any) => void;
declare const onBeforeUpdate: (fn: () => void, target?: any) => void;
declare const onDeactivated: (fn: () => void, target?: any) => void;
declare const onErrorCaptured: typeof Vue.onErrorCaptured;
declare const onMounted: (fn: () => void, target?: any) => void;
declare const onRenderTracked: (fn: (e: Vue.DebuggerEvent) => any, target?: any) => void;
declare const onRenderTriggered: (fn: (e: Vue.DebuggerEvent) => any, target?: any) => void;
declare const onScopeDispose: typeof Vue.onScopeDispose;
declare const onServerPrefetch: (fn: () => void, target?: any) => void;
declare const onUnmounted: (fn: () => void, target?: any) => void;
declare const onUpdated: (fn: () => void, target?: any) => void;
declare const provide: typeof Vue.provide;
declare const proxyRefs: typeof Vue.proxyRefs;
declare const reactive: typeof Vue.reactive;
declare const readonly: typeof Vue.readonly;
declare const ref: typeof Vue.ref;
declare const shallowReactive: typeof Vue.shallowReactive;
declare const shallowReadonly: typeof Vue.shallowReadonly;
declare const shallowRef: typeof Vue.shallowRef;
declare const toRaw: typeof Vue.toRaw;
declare const toRef: typeof Vue.toRef;
declare const toRefs: typeof Vue.toRefs;
declare const triggerRef: typeof Vue.triggerRef;
declare const unref: typeof Vue.unref;
declare const useAttrs: typeof Vue.useAttrs;
declare const useCssModule: typeof Vue.useCssModule;
declare const useCssVars: typeof Vue.useCssVars;
declare const useListeners: typeof Vue.useListeners;
declare const useSlots: typeof Vue.useSlots;
declare const watch: typeof Vue.watch;
declare const watchEffect: typeof Vue.watchEffect;
declare const watchPostEffect: typeof Vue.watchPostEffect;
declare const watchSyncEffect: typeof Vue.watchSyncEffect;

export { computed, createLogger, customRef, defineAsyncComponent, defineComponent, effectScope, getCurrentInstance, getCurrentScope, globalVue, h, inject, isProxy, isReactive, isReadonly, isRef, isShallow, loadPluginModule, markRaw, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onScopeDispose, onServerPrefetch, onUnmounted, onUpdated, provide, proxyRefs, reactive, readonly, ref, registerPluginAssets, resolvePluginAsset, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, triggerRef, unref, useAttrs, useCssModule, useCssVars, useListeners, useSlots, watch, watchEffect, watchPostEffect, watchSyncEffect };
