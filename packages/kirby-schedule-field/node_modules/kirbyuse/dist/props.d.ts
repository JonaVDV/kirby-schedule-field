/**
 * @see https://github.com/getkirby/kirby/blob/f9f00b16a22fe9dbbbddc2bfd4719ca3437cbee9/panel/src/components/Forms/Blocks/Elements/BlockTitle.vue#L14
 * @see https://github.com/getkirby/kirby/blob/f9f00b16a22fe9dbbbddc2bfd4719ca3437cbee9/panel/src/components/Forms/Blocks/Types/Default.vue#L15
 */
declare const block: {
    /**
     * The block content is an object of values,
     * depending on the block type.
     */
    content: {
        default: () => {};
        type: (ArrayConstructor | ObjectConstructor)[];
    };
    /**
     * The fieldset definition with all fields, tabs, etc.
     */
    fieldset: {
        default: () => {};
        type: ObjectConstructor;
    };
    /**
     * API endpoints
     * @value { field, model, section }
     */
    endpoints: {
        default: () => {};
        type: (ArrayConstructor | ObjectConstructor)[];
    };
    /**
     * A unique ID for the block
     */
    id: StringConstructor;
};

declare const after: {
    /**
     * Optional text that will be shown after the input
     */
    after: StringConstructor;
};

declare const autocomplete: {
    /**
     * Sets the HTML5 autocomplete mode for the input
     */
    autocomplete: StringConstructor;
};

declare const autofocus: {
    /**
     * Sets the focus on this field when the form loads. Only the first field with this label gets
     */
    autofocus: BooleanConstructor;
};

declare const before: {
    /**
     * Optional text that will be shown before the input
     */
    before: StringConstructor;
};

declare const disabled: {
    /**
     * If `true`, the field is no longer editable and will not be saved
     */
    disabled: BooleanConstructor;
};

declare const font: {
    /**
     * Changes the font of the input to monospace or sans
     */
    font: StringConstructor;
};

declare const help: {
    /**
     * Optional help text below the field
     */
    help: StringConstructor;
};

declare const icon: {
    icon: {
        /**
         * Changes the icon to something custom. Use one of the icon names from our icon library or a plugin.
         */
        type: StringConstructor;
    };
};

declare const id: {
    /**
     * A unique ID. The component `_uid` will be used as default.
     */
    id: {
        type: (StringConstructor | NumberConstructor)[];
        default(): any;
    };
};

declare const label: {
    /**
     * A descriptive label for the field
     */
    label: StringConstructor;
};

declare const layout: {
    /**
     * Display layout
     * @values "list", "cards", "cardlets", "table"
     */
    layout: {
        type: StringConstructor;
        default: string;
    };
};

declare const maxlength: {
    /**
     * Maximum number of allowed characters
     */
    maxlength: NumberConstructor;
};

declare const minlength: {
    /**
     * Minimum number of required characters
     */
    minlength: NumberConstructor;
};

declare const name: {
    /**
     * A unique name for the input
     */
    name: (StringConstructor | NumberConstructor)[];
};

declare const options: {
    /**
     * An array of option objects
     * @value { value, text, info }
     */
    options: {
        default: () => never[];
        type: ArrayConstructor;
    };
};

declare const pattern: {
    /**
     * A regular expression, which will be used to validate the input
     */
    pattern: StringConstructor;
};

declare const placeholder: {
    /**
     * Custom placeholder text, when the field is empty
     */
    placeholder: (StringConstructor | NumberConstructor)[];
};

declare const required: {
    /**
     * If `true`, the field has to be filled in correctly to be submitted
     */
    required: BooleanConstructor;
};

declare const section: {
    blueprint: StringConstructor;
    lock: (ObjectConstructor | BooleanConstructor)[];
    help: StringConstructor;
    name: StringConstructor;
    parent: StringConstructor;
    timestamp: NumberConstructor;
};

declare const spellcheck: {
    /**
     * If false, spellchecking will be disabled
     */
    spellcheck: {
        type: BooleanConstructor;
        default: boolean;
    };
};

declare const type: {
    type: StringConstructor;
};

export { after, autocomplete, autofocus, before, block, disabled, font, help, icon, id, label, layout, maxlength, minlength, name, options, pattern, placeholder, required, section, spellcheck, type };
